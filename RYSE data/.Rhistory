# Functions to get the groups from the raw residuals
get_groups_raw_residuals <- function(residuals,is_resilience_positive=FALSE){
res_list <- list()
for(i in 1:length(residuals)){
# Result depends of the slope sign
if(is_resilience_positive){
res_list[i] <- if(is.na(residuals[i])){NA}
else if(residuals[i]>0){"resilient"}
else if(residuals[i]==0){"average"}
else{"vulnerable"}
}
else{
res_list[i] <- if(is.na(residuals[i])){NA}
else if(residuals[i]<0){"resilient"}
else if(residuals[i]==0){"average"}
else{"vulnerable"}
}
}
return(res_list)
}
# Visualization function for raw residuals
visualization_raw_residuals <- function(df, adversity, outcome, adjusted_lm, groups, main = "Groups using raw residuals") {
# Adjusted linear regression coefficient for the plot
intercept <- coef(adjusted_lm)[1]
slope     <- coef(adjusted_lm)[2]
# Add groups to the temporary df to color the points
df$group <- factor(groups, levels = c("resilient", "average", "vulnerable"))
# Viz
plot <- ggplot(df, aes(x = .data[[adversity]], y = .data[[outcome]], color = group)) +
geom_point(shape=1,size=0.8) +
geom_abline(intercept = intercept, slope = slope, color = "grey", linetype = "solid") +
labs(
x = adversity,
y = outcome,
title = main,
color = "Group"
) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(size = 10))+
scale_color_manual(values=c("resilient"="skyblue","vulnerable"="coral","average"="grey"))
# Add resilient and vulnerable text
if(slope < 0){
plot <-plot + geom_text(x=max(na.omit(df[[adversity]]))-5,y=max(na.omit(df[[outcome]]))-5,label="Resilient",alpha=0.2,color="grey") + geom_text(x=min(na.omit(df[[adversity]]))+5,y=min(na.omit(df[[outcome]]))+5,label="Vulnerable",alpha=0.2,color="grey")
}
else{
plot <- plot + geom_text(x=min(na.omit(df[[adversity]]))+5,y=max(na.omit(df[[outcome]]))-5,label="Vulnerable",alpha=0.2,color="grey") + geom_text(x=max(na.omit(df[[adversity]]))-5,y=min(na.omit(df[[outcome]]))+5,label="Resilient",alpha=0.2,color="grey")
}
return(plot)
}
## Confidence residuals functions ######
# Predictions to get the lower and upper bounds for confidence intervals
# Two possibilities : confidence (x% sure for the mean value) or prediction (x% sure for an observation)
# Function to return groups based on confidence/credibility intervals
get_groups_intervals <- function(actual, pred,is_resilience_positive=FALSE) {
# Initialization of the result vector
groups <- vector("character", length(actual))
# For each point
for (i in 1:length(actual)) {
# Look if there are NA values
if (is.na(actual[i]) || is.na(pred$lwr[i]) || is.na(pred$upr[i])) {
groups[i] <- NA
}
# Grouping depending if the value is under / over / within the bounds of the intervals
# Condition on the slope sign
else if(is_resilience_positive){
if (actual[i] < pred$lwr[i]) {
groups[i] <- "vulnerable"
} else if (actual[i] > pred$upr[i]) {
groups[i] <- "resilient"
} else {
groups[i] <- "average"
}
}
else{
if (actual[i] < pred$lwr[i]) {
groups[i] <- "resilient"
} else if (actual[i] > pred$upr[i]) {
groups[i] <- "vulnerable"
} else {
groups[i] <- "average"
}
}
}
return(groups)
}
# Visualization function for intervals
visualization_intervals <- function(df, adversity, outcome, adjusted_lm, preds, labels,
main = "Intervals",
colors = c("#deebf7", "#9ecae1","skyblue2", "#6baed6", "#3182bd", "#08519c")) {
# Coefficients of the linear regression
intercept <- coef(adjusted_lm)[1]
slope     <- coef(adjusted_lm)[2]
# Base graph with points and linear regression
plot <- ggplot(df, aes(x = .data[[adversity]], y = .data[[outcome]])) +
geom_point(shape = 1, size = 0.8) +
geom_abline(intercept = intercept, slope = slope, color = "grey", linetype = "solid") +
labs(
x = adversity,
y = outcome,
title = main,
fill = "Interval"
) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(size = 10))
# Combine all intervals parsed in the function
all_preds <- do.call(rbind, lapply(seq_along(preds), function(i) {
pred <- preds[[i]]
pred[[outcome]]   <- df[[outcome]]
pred[[adversity]] <- df[[adversity]]
pred$label <- labels[i]
pred
}))
all_preds$label <- factor(all_preds$label, levels = labels)
# Add ribbons for every intervals
plot <- plot +
geom_ribbon(
data = all_preds,
aes(
x = .data[[adversity]],
ymin = lwr,
ymax = upr,
fill = label,
group = label
),
alpha = 0.4,
inherit.aes = FALSE
) +
scale_fill_manual(values = colors)
# Resilient / Vulnerable annotations
if (slope < 0) {
plot <- plot +
geom_text(x = max(na.omit(df[[adversity]])) - 5,
y = max(na.omit(df[[outcome]])) - 5,
label = "Resilient", alpha = 0.2, color = "grey") +
geom_text(x = min(na.omit(df[[adversity]])) + 5,
y = min(na.omit(df[[outcome]])) + 5,
label = "Vulnerable", alpha = 0.2, color = "grey")
} else {
plot <- plot +
geom_text(x = min(na.omit(df[[adversity]])) + 5,
y = max(na.omit(df[[outcome]])) - 5,
label = "Vulnerable", alpha = 0.2, color = "grey") +
geom_text(x = max(na.omit(df[[adversity]])) - 5,
y = min(na.omit(df[[outcome]])) + 5,
label = "Resilient", alpha = 0.2, color = "grey")
}
return(plot)
}
## Quantile residuals functions ####
# We want the quantile_sub lowest residuals and quantile_sup biggest residuals
get_groups_quantile <- function(residuals,quantile_sub,quantile_sup,is_resilience_positive){
n <- sum(!is.na(residuals))
n_sub <- trunc(n*quantile_sub)
n_sup <- trunc(n*quantile_sup)
index_ordered_residuals <- order(residuals)
res <- rep(NA, length(residuals))
res[!is.na(residuals)] <- "average"
if(is_resilience_positive){
# Lowest residuals -> vulnerable
for(i in 1:n_sub){
index <- index_ordered_residuals[i]
res[[index]] <- "vulnerable"
}
# Biggest residuals -> resilient
for(i in n:(n-n_sup)){
index <- index_ordered_residuals[i]
res[[index]] <- "resilient"
}
}
else{
# Lowest residuals -> resilient
for(i in 1:n_sub){
index <- index_ordered_residuals[i]
res[[index]] <- "resilient"
}
# Biggest residuals -> vulnerable
for(i in n:(n-n_sup)){
index <- index_ordered_residuals[i]
res[[index]] <- "vulnerable"
}
}
return(res)
}
## Credibility residuals functions ##########
# We can do the same with a bayesian approach with a credibility interval (for the mean and for predicted values)
# Function to build the credibility intervals from the bayesian adjusted lm
get_credibility_intervals <- function(lm_adjusted_cred,newdata,lwr=0.025,upr=0.975){
# Posterior linear prediction
preds <- posterior_linpred(lm_adjusted_cred,
newdata = newdata[!is.na(newdata[,c(adversity_string)]),],
draws = 1000,
transform = TRUE)
# Ensure preds is a matrix with rows = draws, cols = observations
if (is.null(dim(preds))) {
preds <- matrix(preds, nrow = 1000)
}
# Compute credible intervals per observation (apply over columns)
intervals <- t(apply(preds, 2, quantile, probs = c(lwr, upr)))
# Formating the result
res <- data.frame(lwr=c(), upr=c())
counter <- 1
# Adding NA or computed value for every point of the dataset
for(i in 1:nrow(newdata)){
if(!is.na(newdata[i,1])){
res[i,"lwr"] <- intervals[counter,1]
res[i,"upr"] <- intervals[counter,2]
counter <- counter + 1
}
else{
res[i,"lwr"] <- NA
res[i,"upr"] <- NA
}
}
return(res)
}
## Standard deviation functions ########
get_groups_sd <- function(df, residuals, bins, adversity_string, is_resilience_positive, sd_multiplicator=1){
res_SD <- c()
bin_labels <- rep(NA, nrow(df))  # To stock the bin of each line.
# Calculate the SD for each bin
for (i in 1:(length(bins) - 1)) {
in_bin <- df[[adversity_string]] > bins[i] & df[[adversity_string]] < bins[i + 1]
bin_labels[in_bin] <- i #We save the i indice of the bin for each line that's in the bin
residuals_bin <- residuals[in_bin]
res_SD[i] <- sd(residuals_bin, na.rm = TRUE)
}
# Flag each residual as resilient, average or vulnerable
groups_sd <- rep(NA, nrow(df))
for (i in seq_along(residuals)) {
bin_i <- bin_labels[i]
# Skip if bin or residual is NA
if (is.na(bin_i) || is.na(residuals[i])) next
# Recuperate the SD for the bin and the residual of the current point
sd_i <- res_SD[bin_i]*sd_multiplicator
res <- residuals[i]
# Look at the value of the residuals with respect to the SD
if (abs(res) <= sd_i) {
groups_sd[i] <- "average"
}
# Bigger residual -> resilient
else if(is_resilience_positive){
if (res > sd_i) {
groups_sd[i] <- "resilient"
} else if (res < -sd_i) {
groups_sd[i] <- "vulnerable"
}
}
# Bigger residual -> vulnerable
else{
if (res > sd_i) {
groups_sd[i] <- "vulnerable"
}
else if (res < -sd_i) {
groups_sd[i] <- "resilient"
}
}
}
return(list(groups_sd=groups_sd,res_SD=res_SD*sd_multiplicator))
}
# Visualization function for the SD intervals
visualization_sd_intervals <- function(df,adversity,outcome,adjusted_lm,bins,res,main="SD Intervals"){
# Adjusted linear model coefficients
intercept <- coef(adjusted_lm)[1]
slope     <- coef(adjusted_lm)[2]
# Base graph with points and regression line
plot <- ggplot(df, aes(x = .data[[adversity]], y = .data[[outcome]])) +
geom_point(shape=1,size=0.8) +
geom_abline(intercept = intercept, slope = slope, color = "grey", linetype = "solid") +
labs(
x = adversity,
y = outcome,
title = main,
fill = "Interval"
) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(size = 10))
# Color the area for each result
all_polygons <- data.frame()
for (i in seq_along(res)){
res_SD <- res[[i]]$res_SD
for(j in 1:(length(bins)-1)){
point_j <- bins[[j]]
point_j1 <- bins[[j+1]]
fit_j <- intercept + slope * point_j
fit_j1 <- intercept + slope * point_j1
sd_j <- res_SD[[j]]
df_area <- data.frame(
x = c(point_j, point_j, point_j1, point_j1),
y = c(fit_j - sd_j, fit_j + sd_j, fit_j1 + sd_j, fit_j1 - sd_j),
group = paste0("poly_", i, "_", j),
fill_factor = names_sd[[i]]
)
all_polygons <- rbind(all_polygons, df_area)
}
}
# Add polygons to the main plot
plot <- plot +
geom_polygon(data = all_polygons, aes(x = x, y = y, group = group, fill = fill_factor), alpha = 0.3, color = NA) +
scale_fill_manual(values = c("2SD" = "lightblue", "1SD" = "skyblue2", "0.5SD" = "deepskyblue3"))
# Add resilient and vulnerable text
if(slope < 0){
plot <-plot + geom_text(x=max(na.omit(df[[adversity]]))-5,y=max(na.omit(df[[outcome]]))-5,label="Resilient",alpha=0.2,color="grey") + geom_text(x=min(na.omit(df[[adversity]]))+5,y=min(na.omit(df[[outcome]]))+5,label="Vulnerable",alpha=0.2,color="grey")
}
else{
plot <- plot + geom_text(x=min(na.omit(df[[adversity]]))+5,y=max(na.omit(df[[outcome]]))-5,label="Vulnerable",alpha=0.2,color="grey") + geom_text(x=max(na.omit(df[[adversity]]))-5,y=min(na.omit(df[[outcome]]))+5,label="Resilient",alpha=0.2,color="grey")
}
return(plot)
}
## K-means functions ######
get_groups_kmeans <- function(df, residuals, is_resilience_positive, data_for_kmeans="residuals_only", outcome_string="", adversity_string="") {
# Initialize result vector
groups <- rep(NA_character_, nrow(df))
# Create dataframe for clustering
if(data_for_kmeans=="residuals_only"){
non_na_indices <- which(!is.na(residuals))
clean_residuals <- residuals[non_na_indices]
df <- data.frame(residual = clean_residuals)
}
else{
df <- df[,c(adversity_string,outcome_string)]
non_na_indices <- which(!is.na(residuals))
clean_residuals <- residuals[non_na_indices]
clean_adversity <- df[non_na_indices,adversity_string]
clean_outcome <- df[non_na_indices,outcome_string]
df <- data.frame(residual = clean_residuals, adversity=clean_adversity,outcome=clean_outcome)
}
# Run K-means clustering with 3 centers
clust <- kmeans(df, centers = 3)
df$cluster <- as.factor(clust$cluster)
# Calculate mean residual for each cluster
cluster_means <- tapply(df$residual, df$cluster, mean)
# Identify cluster corresponding to min, average, and max
ordered_clusters <- names(sort(cluster_means))
min_group <- ordered_clusters[1]
average_group <- ordered_clusters[2]
max_group <- ordered_clusters[3]
# Assign labels based on cluster and resilience sign
for (i in seq_along(non_na_indices)) {
idx <- non_na_indices[i]
cluster_label <- as.character(df$cluster[i])
if (is_resilience_positive) {
if (cluster_label == max_group) {
groups[idx] <- "resilient"
} else if (cluster_label == min_group) {
groups[idx] <- "vulnerable"
} else {
groups[idx] <- "average"
}
} else {
if (cluster_label == max_group) {
groups[idx] <- "vulnerable"
} else if (cluster_label == min_group) {
groups[idx] <- "resilient"
} else {
groups[idx] <- "average"
}
}
}
return(groups)
}
visualization_groups <- function(df,adversity,outcome,adjusted_lm,groups,main="Clusturing results"){
# Adjusted linear regression coefficient for the plot
intercept <- coef(adjusted_lm)[1]
slope     <- coef(adjusted_lm)[2]
# Add groups to the temporary df to color the points
df$group <- factor(groups, levels = c("resilient", "average", "vulnerable",NA))
# Get the limit values of the residuals to visualize the separation of the groups
df$residuals <- df[[outcome]] - (intercept + slope*df[[adversity]])
# Resilient = positive residuals, vulnerable = negative residuals
if(slope<0){
resilient_limit <- min(df[df$group=="resilient",]$residuals, na.rm = TRUE)
vulnerable_limit <- max(df[df$group=="vulnerable",]$residuals, na.rm = TRUE)
}
# Resilient = negative residuals, vulnerable = positive residuals
else{
resilient_limit <- max(df[df$group=="resilient",]$residuals, na.rm = TRUE)
vulnerable_limit <- min(df[df$group=="vulnerable",]$residuals, na.rm = TRUE)
}
# Viz
plot <- ggplot(df, aes(x = .data[[adversity]], y = .data[[outcome]], color = group)) +
geom_point(shape=1,size=0.8) +
geom_abline(intercept = intercept, slope = slope, color = "grey", linetype = "solid") +
labs(
x = adversity,
y = outcome,
title = main,
color = "Group"
) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(size = 10))+
scale_color_manual(values = c("resilient" = "skyblue", "average" = "grey", "vulnerable" = "coral"))
# Add resilient and vulnerable text + lines for the seperation of the groups
if(slope < 0){
plot <-plot + geom_text(x=max(na.omit(df[[adversity]]))-5,y=max(na.omit(df[[outcome]]))-5,label="Resilient",alpha=0.2,color="grey") + geom_text(x=min(na.omit(df[[adversity]]))+5,y=min(na.omit(df[[outcome]]))+5,label="Vulnerable",alpha=0.2,color="grey")
plot <- plot +
geom_abline(intercept = intercept+resilient_limit, slope = slope, color = "grey", linetype = "dashed")+
geom_abline(intercept = intercept+vulnerable_limit, slope = slope, color = "grey", linetype = "dashed")
}
else{
plot <- plot + geom_text(x=min(na.omit(df[[adversity]]))+5,y=max(na.omit(df[[outcome]]))-5,label="Vulnerable",alpha=0.2,color="grey") + geom_text(x=max(na.omit(df[[adversity]]))-5,y=min(na.omit(df[[outcome]]))+5,label="Resilient",alpha=0.2,color="grey")
plot <- plot +
geom_abline(intercept = intercept+resilient_limit, slope = slope, color = "grey", linetype = "dashed")+
geom_abline(intercept = intercept+vulnerable_limit, slope = slope, color = "grey", linetype = "dashed")
}
return(plot)
}
## Hierarchical clusturing functions ####
get_groups_hclust <- function(df, residuals, is_resilience_positive, data_for_hclust="residuals_only", outcome_string="", adversity_string="",distance="euclidean",method="average") {
# Initialize result vector
groups <- rep(NA_character_, nrow(df))
# Create dataframe for clustering
if(data_for_hclust=="residuals_only"){
non_na_indices <- which(!is.na(residuals))
clean_residuals <- residuals[non_na_indices]
df <- data.frame(residual = clean_residuals)
}
else{
df <- df[,c(adversity_string,outcome_string)]
non_na_indices <- which(!is.na(residuals))
clean_residuals <- residuals[non_na_indices]
clean_adversity <- df[non_na_indices,adversity_string]
clean_outcome <- df[non_na_indices,outcome_string]
df <- data.frame(residual = clean_residuals, adversity=clean_adversity,outcome=clean_outcome)
}
# Run Hclust clustering with 3 centers
dist <- dist(df,method=distance)
clust <- hclust(d = dist, method=method)
df$cluster <- as.factor(cutree(clust,k=3))
# Calculate mean residual for each cluster
cluster_means <- tapply(df$residual, df$cluster, mean)
# Identify cluster corresponding to min, average, and max
ordered_clusters <- names(sort(cluster_means))
min_group <- ordered_clusters[1]
average_group <- ordered_clusters[2]
max_group <- ordered_clusters[3]
# Assign labels based on cluster and resilience sign
for (i in seq_along(non_na_indices)) {
idx <- non_na_indices[i]
cluster_label <- as.character(df$cluster[i])
if (is_resilience_positive) {
if (cluster_label == max_group) {
groups[idx] <- "resilient"
} else if (cluster_label == min_group) {
groups[idx] <- "vulnerable"
} else {
groups[idx] <- "average"
}
} else {
if (cluster_label == max_group) {
groups[idx] <- "vulnerable"
} else if (cluster_label == min_group) {
groups[idx] <- "resilient"
} else {
groups[idx] <- "average"
}
}
}
return(groups)
}
library(factoextra) # PCA
library(FactoMineR) # PCA
library(Factoshiny) # PCA
dim(df_SA)
# Variables used
residuals_vars <- c("T1_SES_total_SA","T1_WES_total", "T1_BDI_II","T1_edu_1a")
explication_vars <- c("T1_Sex","T1_Age",paste0("T1_CYRM_", 1:28),paste0("T1_PoNS_",1:8),paste0("T1_SF15_",1:15),paste0("T1_CPTS_",1:20),paste0("T1_FAS_",1:9),paste0("T1_BCE_",1:10))
# Dataframe with SES or WES + pertinent variables
df_SAr <- df_SA[(!is.na(df_SA$T1_SES_total_SA)|!is.na(df_SA$T1_WES_total)) & !is.na(df_SA$T1_BDI_II)&!is.na(df_SA$T1_CYRM_10),c(residuals_vars,explication_vars)]
dim(df_SAr) # 423 individuals
# Impute data
df_SAr_wtWESSES <- df_SAr[explication_vars]
df_SAr_wtWESSES <- as.data.frame(lapply(df_SAr_wtWESSES, function(x) as.numeric(as.character(x))))
df_SAr_wtWESSES.mf <- missForest::missForest(xmis = df_SAr_wtWESSES)
df_SAr[,explication_vars] <- df_SAr_wtWESSES.mf$ximp
#visdat::vis_miss(df_SAr)
# Engagement variable
# Put SES and WES on a 0 to 100 scale
n <- nrow(df_SAr)
for(i in 1:n){
if(is.na(df_SAr[i,"T1_WES_total"])){
df_SAr[i,"T1_Engagement"] <- (df_SAr[i,"T1_SES_total_SA"]-33)/(165-33)*100
}
else if(is.na(df_SAr[i,"T1_SES_total_SA"])){
df_SAr[i,"T1_Engagement"] <- (df_SAr[i,"T1_WES_total"]-9)/(63-9)*100
}
else{# If both are not NA
if(df_SAr[i,"T1_edu_1a"] %in% 9:12){
df_SAr[i,"T1_Engagement"] <- (df_SAr[i,"T1_SES_total_SA"]-33)/(165-33)*100
}
else{
df_SAr[i,"T1_Engagement"] <- (df_SAr[i,"T1_SES_total_SA"]-33)/(165-33)*100
}
}
}
View(df_SAr)
res.PCA<-PCA(df_SAr[, c(paste0("T1_PoNS_", 1:8))],graph=FALSE)
res.PCA$eig
fviz_screeplot(X=res.PCA, addlabels = TRUE, ylim = c(0, 50))
fviz_pca_var(res.PCA, axes = 1 :2,col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
fviz_pca_var(res.PCA, axes = 3:4,col.var = "cos2",gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),repel = TRUE)
corrplot(cor(df_SAr[, c(paste0("T1_PoNS_", 1:8))]))
df <- df_SAr
adversity_string <- "T1_BDI_II"
outcome_string <- "T1_Engagement"
outcome <- df$T1_Engagement
bins <- bins_BDI_II
res <- adjusted_fit(df_SAr,adversity="T1_BDI_II",outcome="T1_Engagement",main="Adjusted and unadjusted linear regression of Engagement (work/school) with BDI-II score",xlab="BDI-II score",ylab="Engagement")
lm_adjusted <- res$lm_adjusted
lm_adjusted_cred <- res$lm_adjusted_cred
residuals <- res$residuals_adjusted
all_groups_BDI_Engagement <- get_all_groups(df,adversity_string,outcome_string,bins,res,modification="nothing")
View(df)
