# Confidence intervals
preds_conf <- list(
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.75)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.6)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.5))
)
names_conf <- list(
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)"
)
for(i in 1:length(preds_conf)){
groups <- get_groups_intervals(outcome, preds_conf[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_conf[[i]])))
df_result[[names_conf[[i]]]] <- groups
}
# Quantiles
list_quantile_sub <- list(0.05,0.1,0.15,0.2,0.25)
list_quantile_sup <- list(0.05,0.1,0.15,0.2,0.25)
names_quant <- list(
"quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (20%)",
"quantiles (25%)"
)
for(i in 1:length(list_quantile_sub)){
groups <- get_groups_quantile(residuals,list_quantile_sub[[i]],list_quantile_sup[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_quant[[i]])))
df_result[[names_quant[[i]]]] <- groups
}
# Standard deviation
list_sd_multiplicator <- list(2,1,0.5)
names_sd <- list("2SD","1SD","0.5SD")
for(i in 1:length(list_sd_multiplicator)){
groups <- get_groups_sd(df, residuals, bins, adversity_string, resilience_sign, sd_multiplicator=list_sd_multiplicator[[i]])$groups_sd
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_sd[[i]])))
df_result[[names_sd[[i]]]] <- groups
}
return(list(df_result=df_result,df_n_groups=df_n_groups))
}
groups_to_test <- list("quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (25%)",
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)")
# Dataframes with all the values
vars <- c("T1_SF_14_PHC", "T1_SES_total", "T1_BDI_II", "T1_CPTS")
df_SA_LPA <- df_SA[complete.cases(df_SA[, vars]), ]
df_CA_LPA <- df_CA[complete.cases(df_CA[, vars]), ]
# We choose the SA dataset because it's larger 366 > 236.
df <- df_SA_LPA
adversity_string <- "T1_CPTS"
# Depression
outcome_string <- "T1_BDI_II"
bins <- bins_CPTS
res_depression <- adjusted_fit(df=df,adversity=adversity_string,outcome=outcome_string)
residuals_depression <- res_depression$residuals_adjusted
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression)
get_all_groups <- function(df,adversity_string,outcome_string,bins,res,modification="nothing"){
outcome <- df[[outcome_string]]
adversity <- df[[adversity_string]]
# Initialize the result data_frames : one with the grouping for each person and each method and one with the number of people in each group for each method
df_n_groups <- data.frame(resilient=c(),average=c(),vulnerable=c())
df_result <- data.frame(residuals=res$residuals_adjusted,adversity=adversity)
# Get the info
lm_adjusted <- res$lm_adjusted
lm_adjusted_cred <- res$lm_adjusted_cred
plot <- res$plot
resilience_sign <- lm_adjusted$coefficients[2]<0
if(modification!="nothing"){
residuals <- transform_residuals(res$residuals_adjusted,adversity,resilience_sign,method=modification)
}
else{
residuals <- res$residuals_adjusted
}
# Raw residuals
groups_raw <- get_groups_raw_residuals(residuals,is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,data.frame(resilient = sum(groups_raw=="resilient", na.rm=TRUE), average = sum(groups_raw=="average", na.rm=TRUE), vulnerable = sum(groups_raw=="vulnerable", na.rm=TRUE), row.names=c("raw")))
df_result[["raw"]] <- groups_raw
# Confidence intervals
preds_conf <- list(
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.75)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.6)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.5)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "confidence", level = 0.99)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "confidence", level = 0.95))
)
names_conf <- list(
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)",
"conf. residuals (99%)",
"conf. residuals (95%)"
)
for(i in 1:length(preds_conf)){
groups <- get_groups_intervals(outcome, preds_conf[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_conf[[i]])))
df_result[[names_conf[[i]]]] <- groups
}
# Quantiles
list_quantile_sub <- list(0.05,0.1,0.15,0.25)
list_quantile_sup <- list(0.05,0.1,0.15,0.25)
names_quant <- list(
"quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (25%)"
)
for(i in 1:length(list_quantile_sub)){
groups <- get_groups_quantile(residuals,list_quantile_sub[[i]],list_quantile_sup[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_quant[[i]])))
df_result[[names_quant[[i]]]] <- groups
}
# Credibility intervals
preds_cred <- list(
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.0005,upr=0.9995),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.005,upr=0.995),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.025,upr=0.975),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.05,upr=0.95),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.125,upr=0.875),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.25,upr=0.75)
)
names_cred <- list(
"cred. 99.9%",
"cred. 99%",
"cred. 95%",
"cred. 90%",
"cred. 75%",
"cred. 50%"
)
for(i in 1:length(preds_cred)){
groups <- get_groups_intervals(outcome, preds_cred[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_cred[[i]])))
df_result[[names_cred[[i]]]] <- groups
}
# Standard deviation
list_sd_multiplicator <- list(2,1,0.5)
names_sd <- list("2SD","1SD","0.5SD")
for(i in 1:length(list_sd_multiplicator)){
groups <- get_groups_sd(df, residuals, bins, adversity_string, resilience_sign, sd_multiplicator=list_sd_multiplicator[[i]])$groups_sd
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_sd[[i]])))
df_result[[names_sd[[i]]]] <- groups
}
# Kmeans (only residuals)
groups_kmeans <- get_groups_kmeans(df, residuals,resilience_sign,outcome_string = outcome_string,adversity_string = adversity_string)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups_kmeans=="resilient", na.rm=TRUE), average = sum(groups_kmeans=="average", na.rm=TRUE), vulnerable = sum(groups_kmeans=="vulnerable", na.rm=TRUE), row.names=c("Kmeans")))
df_result[["Kmeans"]] <- groups_kmeans
return(list(df_result=df_result,df_n_groups=df_n_groups))
}
# Same function with less grouping methods to be faster.
get_all_groups_small <- function(df,adversity_string,outcome_string,bins,res,modification="nothing"){
outcome <- df[[outcome_string]]
adversity <- df[[adversity_string]]
# Initialize the result data_frames : one with the grouping for each person and each method and one with the number of people in each group for each method
df_n_groups <- data.frame(resilient=c(),average=c(),vulnerable=c())
df_result <- data.frame(residuals=res$residuals_adjusted,adversity=adversity)
# Get the info
lm_adjusted <- res$lm_adjusted
lm_adjusted_cred <- res$lm_adjusted_cred
plot <- res$plot
resilience_sign <- lm_adjusted$coefficients[2]<0
if(modification!="nothing"){
residuals <- transform_residuals(res$residuals_adjusted,adversity,resilience_sign,method=modification)
}
else{
residuals <- res$residuals_adjusted
}
# Confidence intervals
preds_conf <- list(
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.75)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.6)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.5))
)
names_conf <- list(
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)"
)
for(i in 1:length(preds_conf)){
groups <- get_groups_intervals(outcome, preds_conf[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_conf[[i]])))
df_result[[names_conf[[i]]]] <- groups
}
# Quantiles
list_quantile_sub <- list(0.05,0.1,0.15,0.2,0.25)
list_quantile_sup <- list(0.05,0.1,0.15,0.2,0.25)
names_quant <- list(
"quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (20%)",
"quantiles (25%)"
)
for(i in 1:length(list_quantile_sub)){
groups <- get_groups_quantile(residuals,list_quantile_sub[[i]],list_quantile_sup[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_quant[[i]])))
df_result[[names_quant[[i]]]] <- groups
}
# Standard deviation
list_sd_multiplicator <- list(2,1,0.5)
names_sd <- list("2SD","1SD","0.5SD")
for(i in 1:length(list_sd_multiplicator)){
groups <- get_groups_sd(df, residuals, bins, adversity_string, resilience_sign, sd_multiplicator=list_sd_multiplicator[[i]])$groups_sd
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_sd[[i]])))
df_result[[names_sd[[i]]]] <- groups
}
return(list(df_result=df_result,df_n_groups=df_n_groups))
}
groups_to_test <- list("quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (25%)",
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)")
# Dataframes with all the values
vars <- c("T1_SF_14_PHC", "T1_SES_total", "T1_BDI_II", "T1_CPTS")
df_SA_LPA <- df_SA[complete.cases(df_SA[, vars]), ]
df_CA_LPA <- df_CA[complete.cases(df_CA[, vars]), ]
# We choose the SA dataset because it's larger 366 > 236.
df <- df_SA_LPA
adversity_string <- "T1_CPTS"
# Depression
outcome_string <- "T1_BDI_II"
bins <- bins_CPTS
res_depression <- adjusted_fit(df=df,adversity=adversity_string,outcome=outcome_string)
residuals_depression <- res_depression$residuals_adjusted
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression)
depression_df_result <- result_all_groups$df_result
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="multiply")
depression_df_result
depression_df_result <- result_all_groups$df_result
depression_df_result
transform_residuals<-function(residuals,adversity,is_resilience_positive,method){
res <- c()
for(i in 1:length(residuals)){
if(method=="multiply"){
res[i] <- residuals[i]*adversity[i]
}
else if(method=="log_multiply"){
res[i] <- residuals[i]*log(1+adversity[i])
}
else if(method=="multiply_divide"){
if(is_resilience_positive){
res_i <- residuals[i]
if(res_i>=0){
res[i] <- res_i*adversity[i]
}
else{
res[i] <- res_i/adversity[i]
}
}
else{
res_i <- residuals[i]
if(res_i>=0){
res[i] <- res_i/adversity[i]
}
else{
res[i] <- res_i*adversity[i]
}
}
}
else if(method=="log_multiply_divide"){
if(is_resilience_positive){
res_i <- residuals[i]
if(res_i>=0){
res[i] <- res_i*log(1+adversity[i])
}
else{
res[i] <- res_i/log(1+adversity[i])
}
}
else{
res_i <- residuals[i]
if(res_i>=0){
res[i] <- res_i/log(1+adversity[i])
}
else{
res[i] <- res_i*log(1+adversity[i])
}
}
}
}
print(head(res,10))
return(res)
}
# Function to get a dataframe with all of the grouping methods result and the dataframe with the sizes of each group for each method
get_all_groups <- function(df,adversity_string,outcome_string,bins,res,modification="nothing"){
outcome <- df[[outcome_string]]
adversity <- df[[adversity_string]]
# Initialize the result data_frames : one with the grouping for each person and each method and one with the number of people in each group for each method
df_n_groups <- data.frame(resilient=c(),average=c(),vulnerable=c())
df_result <- data.frame(residuals=res$residuals_adjusted,adversity=adversity)
# Get the info
lm_adjusted <- res$lm_adjusted
lm_adjusted_cred <- res$lm_adjusted_cred
plot <- res$plot
resilience_sign <- lm_adjusted$coefficients[2]<0
if(modification!="nothing"){
residuals <- transform_residuals(res$residuals_adjusted,adversity,resilience_sign,method=modification)
}
else{
residuals <- res$residuals_adjusted
}
# Raw residuals
groups_raw <- get_groups_raw_residuals(residuals,is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,data.frame(resilient = sum(groups_raw=="resilient", na.rm=TRUE), average = sum(groups_raw=="average", na.rm=TRUE), vulnerable = sum(groups_raw=="vulnerable", na.rm=TRUE), row.names=c("raw")))
df_result[["raw"]] <- groups_raw
# Confidence intervals
preds_conf <- list(
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.75)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.6)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.5)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "confidence", level = 0.99)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "confidence", level = 0.95))
)
names_conf <- list(
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)",
"conf. residuals (99%)",
"conf. residuals (95%)"
)
for(i in 1:length(preds_conf)){
groups <- get_groups_intervals(outcome, preds_conf[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_conf[[i]])))
df_result[[names_conf[[i]]]] <- groups
}
# Quantiles
list_quantile_sub <- list(0.05,0.1,0.15,0.25)
list_quantile_sup <- list(0.05,0.1,0.15,0.25)
names_quant <- list(
"quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (25%)"
)
for(i in 1:length(list_quantile_sub)){
groups <- get_groups_quantile(residuals,list_quantile_sub[[i]],list_quantile_sup[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_quant[[i]])))
df_result[[names_quant[[i]]]] <- groups
}
# Credibility intervals
preds_cred <- list(
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.0005,upr=0.9995),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.005,upr=0.995),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.025,upr=0.975),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.05,upr=0.95),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.125,upr=0.875),
get_credibility_intervals(lm_adjusted_cred,newdata=df[c(adversity_string)],lwr=0.25,upr=0.75)
)
names_cred <- list(
"cred. 99.9%",
"cred. 99%",
"cred. 95%",
"cred. 90%",
"cred. 75%",
"cred. 50%"
)
for(i in 1:length(preds_cred)){
groups <- get_groups_intervals(outcome, preds_cred[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_cred[[i]])))
df_result[[names_cred[[i]]]] <- groups
}
# Standard deviation
list_sd_multiplicator <- list(2,1,0.5)
names_sd <- list("2SD","1SD","0.5SD")
for(i in 1:length(list_sd_multiplicator)){
groups <- get_groups_sd(df, residuals, bins, adversity_string, resilience_sign, sd_multiplicator=list_sd_multiplicator[[i]])$groups_sd
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_sd[[i]])))
df_result[[names_sd[[i]]]] <- groups
}
# Kmeans (only residuals)
groups_kmeans <- get_groups_kmeans(df, residuals,resilience_sign,outcome_string = outcome_string,adversity_string = adversity_string)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups_kmeans=="resilient", na.rm=TRUE), average = sum(groups_kmeans=="average", na.rm=TRUE), vulnerable = sum(groups_kmeans=="vulnerable", na.rm=TRUE), row.names=c("Kmeans")))
df_result[["Kmeans"]] <- groups_kmeans
return(list(df_result=df_result,df_n_groups=df_n_groups))
}
# Same function with less grouping methods to be faster.
get_all_groups_small <- function(df,adversity_string,outcome_string,bins,res,modification="nothing"){
outcome <- df[[outcome_string]]
adversity <- df[[adversity_string]]
# Initialize the result data_frames : one with the grouping for each person and each method and one with the number of people in each group for each method
df_n_groups <- data.frame(resilient=c(),average=c(),vulnerable=c())
df_result <- data.frame(residuals=res$residuals_adjusted,adversity=adversity)
# Get the info
lm_adjusted <- res$lm_adjusted
lm_adjusted_cred <- res$lm_adjusted_cred
plot <- res$plot
resilience_sign <- lm_adjusted$coefficients[2]<0
if(modification!="nothing"){
residuals <- transform_residuals(res$residuals_adjusted,adversity,resilience_sign,method=modification)
}
else{
residuals <- res$residuals_adjusted
}
# Confidence intervals
preds_conf <- list(
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.75)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.6)),
as.data.frame(predict(lm_adjusted, newdata = df, interval = "prediction", level = 0.5))
)
names_conf <- list(
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)"
)
for(i in 1:length(preds_conf)){
groups <- get_groups_intervals(outcome, preds_conf[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_conf[[i]])))
df_result[[names_conf[[i]]]] <- groups
}
# Quantiles
list_quantile_sub <- list(0.05,0.1,0.15,0.2,0.25)
list_quantile_sup <- list(0.05,0.1,0.15,0.2,0.25)
names_quant <- list(
"quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (20%)",
"quantiles (25%)"
)
for(i in 1:length(list_quantile_sub)){
groups <- get_groups_quantile(residuals,list_quantile_sub[[i]],list_quantile_sup[[i]],is_resilience_positive=resilience_sign)
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_quant[[i]])))
df_result[[names_quant[[i]]]] <- groups
}
# Standard deviation
list_sd_multiplicator <- list(2,1,0.5)
names_sd <- list("2SD","1SD","0.5SD")
for(i in 1:length(list_sd_multiplicator)){
groups <- get_groups_sd(df, residuals, bins, adversity_string, resilience_sign, sd_multiplicator=list_sd_multiplicator[[i]])$groups_sd
df_n_groups <- rbind(df_n_groups,
data.frame(resilient = sum(groups=="resilient", na.rm=TRUE), average = sum(groups=="average", na.rm=TRUE), vulnerable = sum(groups=="vulnerable", na.rm=TRUE), row.names=c(names_sd[[i]])))
df_result[[names_sd[[i]]]] <- groups
}
return(list(df_result=df_result,df_n_groups=df_n_groups))
}
groups_to_test <- list("quantiles (5%)",
"quantiles (10%)",
"quantiles (15%)",
"quantiles (25%)",
"pred. residuals (75%)",
"pred. residuals (60%)",
"pred. residuals (50%)")
# Dataframes with all the values
vars <- c("T1_SF_14_PHC", "T1_SES_total", "T1_BDI_II", "T1_CPTS")
df_SA_LPA <- df_SA[complete.cases(df_SA[, vars]), ]
df_CA_LPA <- df_CA[complete.cases(df_CA[, vars]), ]
# We choose the SA dataset because it's larger 366 > 236.
df <- df_SA_LPA
adversity_string <- "T1_CPTS"
# Depression
outcome_string <- "T1_BDI_II"
bins <- bins_CPTS
res_depression <- adjusted_fit(df=df,adversity=adversity_string,outcome=outcome_string)
residuals_depression <- res_depression$residuals_adjusted
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="nothing")
depression_df_result <- result_all_groups$df_result
depression_df_result$residuals
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="multiply")
depression_df_result <- result_all_groups$df_result
depression_df_result
outcome_string <- "T1_BDI_II"
bins <- bins_CPTS
res_depression <- adjusted_fit(df=df,adversity=adversity_string,outcome=outcome_string)
residuals_depression <- res_depression$residuals_adjusted
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="nothing")
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="nothing")
grouping_nothing <- result_all_groups$df_n_groups
# Multiply
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="multiply")
grouping_multiply <- result_all_groups$df_n_groups
#Multiply and divide
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="multiply_divide")
grouping_multiply_divide <- result_all_groups$df_n_groups
# log multiply and divide
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification="log_multiply_divide")
grouping_log_multiply_divide <- result_all_groups$df_n_groups
View(grouping_log_multiply_divide)
View(grouping_multiply)
View(grouping_multiply_divide)
View(grouping_nothing)
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification ="log_multiply_divide")
depression_df_result_log_multiply_divide <- result_all_groups$df_result
depression_classification_result_tree <- estimation_classification(df,depression_df_result_log_multiply_divide,"depression", groups_to_test,method="classification_tree")
View(depression_classification_result_LDA)
View(depression_classification_result_tree)
result_all_groups <- get_all_groups_small(df,adversity_string,outcome_string,bins,res_depression,modification ="multiply_divide")
depression_df_result_log_multiply_divide <- result_all_groups$df_result
depression_classification_result_tree <- estimation_classification(df,depression_df_result_log_multiply_divide,"depression", groups_to_test,method="classification_tree")
